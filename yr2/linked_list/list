public class List {
	protected ListNode firstNode;											//the first node
	protected ListNode lastNode;											//the last node
	private String name;												//a string name
	
	public void insertAtFront (Object newData) {						//insert object at front
		if (firstNode == null)											//empty list
			firstNode = lastNode = new ListNode(newData, null);
		else {
			ListNode newFirstNode = new ListNode(newData, firstNode);
			firstNode = newFirstNode;
		}
	}
	
	public void insertAtBack (Object newData) {							//insert object at back
		if (firstNode == null)
			firstNode = lastNode = new ListNode(newData, null);
		else {
			ListNode newLastNode = new ListNode(newData, null);
			lastNode.setNext(newLastNode);
			lastNode = newLastNode;
		}
	}
	
	public Object removeFromFront () {									//remove object from front
		if (firstNode == null)											//empty list
			return null;
		
		Object removedData = firstNode.getData();
		
		if (firstNode == lastNode)										//only one list node					
			firstNode = lastNode = null;
		
		else {
			firstNode = firstNode.getNext();
		}
		
		return removedData;
	}
	
	public Object removeFromBack () {									//remove object from back
		if (firstNode == null)											//empty list
			return null;
		
		Object removedData = lastNode.getData();
		
		if (firstNode == lastNode)										//only one list node					
			firstNode = lastNode = null;
		
		else {
			ListNode current = firstNode;
			while (current.getNext() != lastNode )
				current = current.getNext();
			lastNode = current;
			current.setNext(null);
		}
		
		return removedData;
	}
	
	public ListNode getFirst() {
		return firstNode;
	}
	
	public String toString() {
		String output = new String();
		ListNode current = firstNode;
		
		output = name + ":";
		while (current != null) {
			output += " " + current.getData();
			current = current.getNext();
		}
		return output;
	}
	
	//constructors
	public List (String listName) {
		firstNode = lastNode = null;
		name = listName;
	}
	
	public List() {
		this("List");
	}
}
